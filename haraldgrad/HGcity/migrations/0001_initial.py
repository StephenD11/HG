# Generated by Django 5.1.4 on 2025-02-10 17:22

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(blank=True, default='Имя', max_length=100, null=True, verbose_name='Имя персонажа')),
                ('last_name', models.CharField(blank=True, default='Фамилия', max_length=100, null=True, verbose_name='Фамилия персонажа')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Почта')),
                ('hp', models.IntegerField(blank=True, default=100, null=True, verbose_name='Жизни')),
                ('social_rating', models.IntegerField(blank=True, default=0, null=True, verbose_name='Соц.рейтинг')),
                ('wallet', models.IntegerField(blank=True, default=0, null=True, verbose_name='Кошелек')),
                ('pin_code', models.CharField(blank=True, max_length=4, null=True, verbose_name='Пин код')),
                ('registration_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP адрес')),
                ('ideology', models.CharField(blank=True, choices=[('Национализм', 'Национализм'), ('Социализм', 'Социализм'), ('Демократия', 'Демократия'), ('Монархизм', 'Монархизм')], default='None', max_length=20, null=True, verbose_name='Идеология')),
                ('logo', models.CharField(blank=True, max_length=255, null=True, verbose_name='Логотип')),
                ('last_name_change', models.DateTimeField(auto_now=True, verbose_name='Дата изменения имени')),
                ('last_username_change', models.DateTimeField(auto_now=True, verbose_name='Дата изменения лого')),
                ('is_banned', models.BooleanField(default=False, verbose_name='Бан')),
                ('is_email_verified', models.BooleanField(default=False, verbose_name='Подтверждение почты')),
                ('chat_verified', models.BooleanField(default=True, verbose_name='Доступ к чату')),
                ('role', models.CharField(choices=[('Житель', 'Житель'), ('ГОХ', 'ГОХ'), ('Капитан Гох', 'Капитан Гох'), ('Система', 'Система')], default='Житель', max_length=20, verbose_name='Роль')),
                ('biography', models.TextField(default='Здесь может быть ваша биография...', max_length=5000, null=True, verbose_name='Биография')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='custom_user_groups', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_permissions', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Banneded',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(verbose_name='Причина')),
                ('banned_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата бана')),
                ('banned_by_username', models.CharField(max_length=255, verbose_name='Бан от')),
                ('banned_by_role', models.CharField(max_length=255, verbose_name='Бан от Роли')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ban_info', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Бан',
                'verbose_name_plural': 'Баны',
            },
        ),
    ]
